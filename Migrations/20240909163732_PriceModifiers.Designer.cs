// <auto-generated />
using System;
using ABP_ConferenceBookingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ABP_ConferenceBookingApp.Migrations
{
    [DbContext(typeof(ApplicationDB))]
    [Migration("20240909163732_PriceModifiers")]
    partial class PriceModifiers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ABP_ConferenceBookingApp.Model.BookingHall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("hallConferenceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("hallConferenceId");

                    b.ToTable("BookingHalls", t =>
                        {
                            t.HasCheckConstraint("ValidDate", "[startTime] < [endTime]");
                        });
                });

            modelBuilder.Entity("ABP_ConferenceBookingApp.Model.HallConference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.ToTable("HallConferences");
                });

            modelBuilder.Entity("ABP_ConferenceBookingApp.Model.PriceModifiers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<TimeOnly>("dateEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("dateStart")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("PriceModifiers", t =>
                        {
                            t.HasCheckConstraint("ValidDate", "[dateStart] < [dateEnd]")
                                .HasName("ValidDate1");
                        });
                });

            modelBuilder.Entity("ABP_ConferenceBookingApp.Model.ServiceConference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.ToTable("serviceConferences");
                });

            modelBuilder.Entity("BookingHallServiceConference", b =>
                {
                    b.Property<int>("ServiceConferencesId")
                        .HasColumnType("int");

                    b.Property<int>("bookingHallsId")
                        .HasColumnType("int");

                    b.HasKey("ServiceConferencesId", "bookingHallsId");

                    b.HasIndex("bookingHallsId");

                    b.ToTable("BookingHallServiceConference");
                });

            modelBuilder.Entity("HallConferenceServiceConference", b =>
                {
                    b.Property<int>("ConferencesId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceConferencesId")
                        .HasColumnType("int");

                    b.HasKey("ConferencesId", "ServiceConferencesId");

                    b.HasIndex("ServiceConferencesId");

                    b.ToTable("HallConferenceServiceConference");
                });

            modelBuilder.Entity("ABP_ConferenceBookingApp.Model.BookingHall", b =>
                {
                    b.HasOne("ABP_ConferenceBookingApp.Model.HallConference", "hallConference")
                        .WithMany()
                        .HasForeignKey("hallConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hallConference");
                });

            modelBuilder.Entity("BookingHallServiceConference", b =>
                {
                    b.HasOne("ABP_ConferenceBookingApp.Model.ServiceConference", null)
                        .WithMany()
                        .HasForeignKey("ServiceConferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABP_ConferenceBookingApp.Model.BookingHall", null)
                        .WithMany()
                        .HasForeignKey("bookingHallsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HallConferenceServiceConference", b =>
                {
                    b.HasOne("ABP_ConferenceBookingApp.Model.HallConference", null)
                        .WithMany()
                        .HasForeignKey("ConferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABP_ConferenceBookingApp.Model.ServiceConference", null)
                        .WithMany()
                        .HasForeignKey("ServiceConferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
